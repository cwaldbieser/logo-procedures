
; Dependencies
load "lists.lg
load "shapes.lg
load "spirograph.lg
load "shapeograph.lg
load "translate.lg
load "patterns.lg

; Demos

to demo.rotate
cs
pd
setpencolor 2
repeat 18 [repeat 20 [rt 1 spirograph 50 40 20 wait 1 clean]]
end

to demo1
cs
shapeograph [xlated [equalateral 60] [-30 0] 30 ] 10 100
end

to demo2
cs
shapeograph [circle 90] 10 100
end

to demo3 [:side 80] [:pencolors [4 2 1]] [:innerradius 10] [:angle 10]
cs
pu
forward 40
pd
(foreach :pencolors [setpencolor ? shapeograph [xlated [rectangle :side :side] (list (-0.5 * :side)  0) 0] :angle ((:innerradius + ((# - 1) * :side)) + 10)])
end

to demo4
(demo3 80 [1 2 3 5])
end

to demo5
cs
repeat 18 [pu home left 10 * # (ellipse pos 150) wait 10]
end

to demo6 [:radius 150] [:wait 7] [:colors [1 2 3 5]]
cs
repeat 18 [pu home left 10 * # setpencolor pick :colors (ellipse pos :radius) wait 7]
pu
home pd
end

to nested.hallows [:n 20]
repeat 5 [ifelse (modulo # 2) = 1 [deathly.hallows :n * (power 2 #)] [flipped.hallows :n * (power 2 #)]]
end

to pattern.flipped.hallows [:side 200]
shapeograph [flipped.hallows :side] 15 50
end

to pattern.mystery.hallows [:side 200] [:inner.radius 90]
shapeograph [mystery.hallows :side] 15 :inner.radius
end

to demo.golden.turtle
repeat 1800 [forward 20 right repcount + .1]
end

to pattern.colorsquare
shapeograph [colorsquare 17 * repcount] 15 0
end

to pattern.colorhex [:size 100] [:colors [1 2 3 4 5 6]]
shapeograph [(colorhex :size :colors)] 15 20
end

to pattern.starburst [:colors [1 3 5 2 4 6]]
shapeograph [(star6 300 :colors)] 15 80
end

to pattern.supernova [:colors [1 3 5 2 4 6]]
cs shapeograph [shapeograph [(star6 150 :colors)] 15 40] 45 150
end

