

to circle :radius
arc 360 :radius
end

to rectangle :w :h
repeat 2 [forward :w right 90 forward :h right 90]
end

to square :side
rectangle :side :side
end

to equalateral :side
repeat 3 [forward :side right 120]
end

to ellipse :center :r [:squash.x 1] [:squash.y 0.5] [:step 15]
make "h first :center       ; x coordinate of circle center
make "k last :center        ; y coordinate of circle center
pu
make "theta heading * -1 + 90
make "theta.start :theta
make "alpha :theta
make "x :h + :squash.x * :r * cos :theta
make "y :k - :squash.y * :r * sin :theta  
setpos rotate.coords :x :y :alpha
pd
do.until [
    make "theta :theta + :step
    make "x :h + :squash.x * :r * cos :theta
    make "y :k - :squash.y * :r * sin :theta  
    setpos rotate.coords :x :y :alpha
] [:theta - :theta.start >= 360]
end

to rotate.coords :x :y :theta
    make "x0 (:x * cos :theta) + (:y * sin :theta)
    make "y0 (:y * cos :theta) - (:x * sin :theta) 
    output (list :x0 :y0)
end

to compose.shapes :shapecmds :shapeargs
(foreach :shapecmds :shapeargs [
    (apply ?1 ?2)
])
end

